Let us look at an apparently straightforward problem in formalising a
simple program transformation: the inling of let-bound variables by
substitution. We have two languages: the source (\AD{S}), which has
let-bindings, and the target (\AD{T}), which does not:

S ::= x | S S | \x. S | let x = S in S
T ::= x | T T | \x. T

Let us assume that our task is to define operational semantics for
these two languages, define the program transformation itself, and
prove a correctness lemma that states each step in the source langauge
is simulated by zero or more steps of the transformed terms in the
target language. In the course of doing this, we discover that we
actually have a large amount of work to do:

- To define the operational semantics we need to define substitution,
  and hence renaming, for the source and target languages.

- The cases for $\lambda$s and applications in the transformation are
  structural, but if we added more constructs to both languages, we
  would have to write more and more code to say we are doing nothing
  interesting to them.

- In the course of proving the correctness lemma, we discover that we
  need to prove eight lemmas about the interactions of renaming,
  substitution and transformation that are all remarkably similar, but
  must be stated and proved separately.

After doing all of this work, we only have a result for a single pair
of source and target languages. If we were to change our object of
study, we would have to repeat the same work all over again (or at
least do a lot of cutting, pasting, and editing).

In this paper, we show how to generically define renaming and
substitution \ref{foo}, how to generically define the let-binding
removal transformation \ref{sec-blah}, and how to generically prove
the required renaming, substitution and transformation fusion
lemmas. All of these definitions are generic in the underlying syntax,
so we do this work once and for all, leaving the user to focus on the
interesting properties and proofs.
