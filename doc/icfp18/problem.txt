Let us start with a thought experiment demonstrating how a lot of common
boilerplate gets in the way when trying to formalize a straightforward
problem involving well scoped-and-typed syntaxes with binding.

Our thought experiment is the implementation of a compilation pass elaborating
a simply-typed source language (called \AD{S}) with let-bindings to a similar
target language (called \AD{T}) without let-bindings.

S ::= x | S S | \x. S | let x = S in S
T ::= x | T T | \x. T

Our simple pass maintains an environment of target terms associated to source
variables and translates variables by a look up in this environment. It is
purely structural on the constructors which exists in both languages and turns
a source-language let-binding into a host language one. In other words: it
inlines the let-bindings in the target.

elab rho (let x = u in b) = let v = elab rho u in elab (rho [v/x]) b

We have come to expect to obtain the guarantee that this transformation is
scope-and-type preserving by sheer typechecking. Freed from having to spend
time on \emph{that} proof and for added peace of mind, we demand a simulation
lemma. This statement will relate the behaviour of our source terms to that of
their images via elaboration, guaranteeing we preserve the original program's
semantics.

We characterise the terms' behaviour by defining two small-step operational
semantics, ~>^S for the source language and ~>^T for the target one. We omit
the structural rules and focus here on the computational ones:

~>^S : (\x. b) u ~> b [u/x] | let x = u in b ~> b [u/x]
~>^T : (\x. b) u ~> b [u/x]

Note that to define these reduction rules, we already have silently assumed
the existence of a substitution function. Whose definition itself requires
the existence of a renaming function. In other words: the formal development
already involves four extra boilerplate definitions we would like not to have
to mention.

Once we have these small step operational semantics, we can state our lemma:
if a source term \AB{t} reduces in one step to a term \AB{u} then the elaboration
of \AB{t} should reduce to the elaboration of \AB{u} in zero or more steps.

Ultimately to prove this simple statement we had to implement six fusion lemmas
about the interactions of renaming, substitution and elaboration, three lemmas
about the stability of the small step operational semantics under renaming and
substitution, and one lemma about the identity substitution. All of these lemmas
follow one of two structures: they are either simulations lemmas relating two
semantics or fusion lemmas relating the composition of two semantics to a third
one.

%ref the appropriate sections

Note finally that after doing all of this work, we only have a result for a
single pair of source and target languages. If we were to change our object
of study, we would have to repeat the same work all over again.

%ref the generic let-elaboration section
